# -*- coding: utf-8 -*-
"""memo_types.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oX4sTgZqJF2Huqwr6LkPBLu8KxhKUwBs
"""

from collections import Counter
import pandas as pd
import gensim
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import numpy as np

class memo_types:
    def __init__(self, memo_data):
        self.memo_data = memo_data
        sub_type_list = list(memo_data['lesion_sub_type'].unique())
        self.sub_type_list = sub_type_list
    
    def get_detail_table(self):
        type_dict_detail = {}
        for i in range(len(self.memo_data)):
            if self.memo_data['lesion_sub_type'][i] in type_dict_detail.keys():
                if self.memo_data['lesion_detail_type'][i] in type_dict_detail[self.memo_data['lesion_sub_type'][i]]:
                    continue
                else:
                    type_dict_detail[self.memo_data['lesion_sub_type'][i]].append(self.memo_data['lesion_detail_type'][i])
            else:
                type_dict_detail[self.memo_data['lesion_sub_type'][i]] = [self.memo_data['lesion_detail_type'][i]]

        return type_dict_detail
        
    def get_detail_dict(self):
        
        type_dict_detail = {}
        for i in range(len(self.memo_data)):
            if self.memo_data['lesion_sub_type'][i] in type_dict_detail.keys():
                if self.memo_data['lesion_detail_type'][i] in type_dict_detail[self.memo_data['lesion_sub_type'][i]]:
                    continue
                else:
                    type_dict_detail[self.memo_data['lesion_sub_type'][i]].append(self.memo_data['lesion_detail_type'][i])
            else:
                type_dict_detail[self.memo_data['lesion_sub_type'][i]] = [self.memo_data['lesion_detail_type'][i]]

        return type_dict_detail
    
    def get_sub_type_plot(self):
        uq_id_list = list(self.memo_data['lesion_id'].unique())

        uq_id_index = []
        for i in range(len(uq_id_list)):
            uq_id_index.append(self.memo_data.index[self.memo_data['lesion_id']== uq_id_list[i]][0])


        sub_type_count = []
        for n, i in enumerate(self.sub_type_list):
            sub_type_count.append(0)
            for j in uq_id_index:
                if self.memo_data['lesion_sub_type'][j] == i:
                    sub_type_count[n] += 1


        ty_plt_dict = {}
        temp_idx = []
        for i in range(len(self.sub_type_list)):
            ty_plt_dict[self.sub_type_list[i]] = sub_type_count[i]
            temp_idx.append(i)
            ty_plt_df = pd.DataFrame(ty_plt_dict,index = [0])
            ty_plt_df = ty_plt_df.transpose()
            ty_plt_df = ty_plt_df[0].sort_values(ascending = True)
            ty_plt_df

        x_lo = temp_idx
        x = list(ty_plt_df.index)
        y = list(ty_plt_df.values)
        plt.figure(figsize=(14,10))
        plt.title('sub_type_count')
        plt.barh(x, y, label = 'sub_type_count')

        for i, v in enumerate(y):
            plt.text(v, x_lo[i], y[i],
                    fontsize = 14,
                    color = 'blue')
            
        # plt.xticks(rotation=90)
        plt.xlabel('출현 개수')
        plt.legend()
        plt.grid()

        plt.show()
            
    def get_detail_type_plot(self):
        ## sub_type 인풋 받고
        # temp_num = int(input('[1]: 차량점검\t [2]: 브레이크\t [3]: 타이어\t [4]: 경고등\n[5]: 라이트\t [6]: 위생문제\t [7]: 시동\t [8]: 주행관련\n[9]: 차량내부\t [10]: 블랙박스\t [11]: 내비게이션\t [12]: 주유/충전카드\n[13]: 하이패스\t [14]: 후방카메라\t [15]: 사고조사\t [16]: 차량외부\n[17]: 단말기\t [18]: 주차장\t [19]: 비치품\t [20]: ADAS\n[21]:충전기 확인\n'))
        # search = le_sub_ty[temp_num-1]
        temp_num = int(input('[1]: 차량점검(1개)\t [2]: 브레이크(4개)\t [3]: 타이어(8개)\t [4]: 경고등(14개)\n[5]: 라이트(2개)\t [6]: 위생문제(8개)\t [7]: 시동(5개)\t\t [8]: 주행관련(8개)\n[9]: 차량내부(30개)\t [10]: 블랙박스(4개)\t [11]: 내비게이션(7개)\t [12]: 주유/충전카드(7개)\n[13]: 하이패스(5개)\t [14]: 후방카메라(2개)\t [15]: 사고조사(1개)\t [16]: 차량외부(27개)\n[17]: 단말기(6개)\t [18]: 주차장(6개)\t [19]: 비치품(3개)\t [20]: ADAS(2개)\n[21]:충전기 확인(1개)\n'))
        search = self.sub_type_list[temp_num-1]

        ##시작
        detail_dict = self.get_detail_dict()
        detail_list = detail_dict[search] # 디테일 목록

        temp_df = self.memo_data.loc[self.memo_data['lesion_sub_type']== search] # sub_type과 일치하는 df

        # 고유id만 추출
        temp_df_drop_index = []
        temp_df_keep_id = []
        for i in range(len(temp_df)):
            if temp_df['lesion_id'][temp_df.index[i]] in temp_df_keep_id:
                temp_df_drop_index.append(temp_df.index[i])
            else:
                temp_df_keep_id.append(temp_df['lesion_id'][temp_df.index[i]])

        temp_df = temp_df.drop(index = temp_df_drop_index, axis = 0, inplace = False)

        # 고유id내의 detail 개수 count
        temp_detail_count = []
        for n, i in enumerate(detail_list):
            temp_detail_count.append(0)
            for j in temp_df.index:
                if temp_df['lesion_detail_type'][j] == i:
                    temp_detail_count[n] += 1

        # 그래프를 만들기 위한 df 생성
        temp_plt_dict = {}
        temp_idx2 = []
        for i in range(len(detail_list)):
            temp_plt_dict[detail_list[i]] = temp_detail_count[i]
            temp_idx2.append(i)
        temp_plt_df = pd.DataFrame(temp_plt_dict,index = [0])
        temp_plt_df = temp_plt_df.transpose()
        temp_plt_df = temp_plt_df[0].sort_values(ascending = True)
        # temp_plt_df


        # 그래프 만들기
        x_lo2 = temp_idx2
        x_2 = list(temp_plt_df.index)
        y_2 = list(temp_plt_df.values)
        plt.figure(figsize=(14,10))
        plt.title(search)
        plt.barh(x_2, y_2, label = 'detail_type_count')

        for i, v in enumerate(y_2):
            plt.text(v, x_lo2[i], y_2[i],
                    fontsize = 14,
                    color = 'blue')
            
        # plt.xticks(rotation=90)
        plt.xlabel('출현 개수')
        plt.legend()
        plt.grid()

        return(plt.show())
    
    def hello(self, sentence):
        return sentence

